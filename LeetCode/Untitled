--------------- ShipDeploymentValidator::duplicatedDeployment ---------------
* First approach
  cambiar la lista por un set
* Otro
Set<String> shipNames = ships.stream()
        .map(ship -> ship.getShipType().getShipTypeName())
        .collect(Collectors.toSet());
if (shipNames.size() != ShipType.values().length) {}



--------------- ShipDeploymentValidator::shipIsNotContiguous ---------------
* Primer approach
  Si consideramos que al crear un bote [B1, B1, B2], esta bien que tire el error de que sobrelapan
  Podemos hacer Max - Min == length - 1

  List<Integer> elementsToCompare = new ArrayList<>();
  if (isHorizontal) {
      elementsToCompare = ship.getCoordinates().stream()
              .map(Coordinate::getColumn)
              .collect(toList());
  }
  if (isVertical) {
      elementsToCompare = ship.getCoordinates().stream()
              .map(Coordinate::getRow)
              .collect(toList());
  }
  Integer minElement = Collections.min(elementsToCompare);
  Integer maxElement = Collections.max(elementsToCompare);

  if (maxElement-minElement != ship.getShipType().getShipLength() -1) {
      throw new ShipDeploymentException(ship.getShipType().getShipTypeName(), ship.getCoordinates().stream().map(Coordinate::getValue).collect(toList()));
  }

  -----------
  Si lo anterior no esta bien (te podrian enviar 2 veces la misma coordenada)
  List<Integer> elementsToCompare = new ArrayList<>();
  if (isHorizontal) {
      elementsToCompare = ship.getCoordinates().stream()
              .map(Coordinate::getColumn)
              .collect(toList());
  }
  if (isVertical) {
      elementsToCompare = ship.getCoordinates().stream()
              .map(Coordinate::getRow)
              .collect(toList());
  }
  Integer minElement = Collections.min(elementsToCompare);

  for (int i=1; i < elementsToCompare.size(); i++) {
      if(minElement + i != elementsToCompare.get(i)) {
          throw new ShipDeploymentException(ship.getShipType().getShipTypeName(), ship.getCoordinates().stream().map(Coordinate::getValue).collect(toList()));
      }
  }

  --------------- FieldService::isShipSunk ---------------

    @Test
    public void testShipSunk() {
        List<Coordinate> coordinates = shipsDeployment.get(0).getCoordinates();
        field[coordinates.get(0).getRow()][coordinates.get(0).getColumn()].hit();
        field[coordinates.get(1).getRow()][coordinates.get(1).getColumn()].hit();
        boolean isShipSunk = fieldService.isShipSunk(field, shipsDeployment.get(0));
        assertTrue(isShipSunk);
    }

    public boolean isShipSunk(Cell[][] field, Ship ship) {
      return ship.getCoordinates()
                  .stream()
                  .map(coordinate -> field[coordinate.getRow()][coordinate.getColumn()].isHit())
                  .reduce(true, (accumulator, current) -> accumulator && current);
    }


  --------------- FieldService::allShipSunk ---------------

    @Test
    public void testAllShipSunkIsFalseWhenOnlyOneShipIsSunk() {
        List<Coordinate> coordinates = shipsDeployment.get(0).getCoordinates();
        field[coordinates.get(0).getRow()][coordinates.get(0).getColumn()].hit();
        field[coordinates.get(1).getRow()][coordinates.get(1).getColumn()].hit();
        boolean allShipSunk = fieldService.allShipsSunk(field);
        assertFalse(allShipSunk);
    }

    @Test
    public void testAllShipSunkIsTrue() {
        shipsDeployment.stream()
                .map(Ship::getCoordinates)
                .flatMap(Collection::stream)
                .forEach(coordinate -> field[coordinate.getRow()][coordinate.getColumn()].hit());

        boolean allShipSunk = fieldService.allShipsSunk(field);
        assertTrue(allShipSunk);
    }

    public boolean allShipsSunk(Cell[][] field) {
        for (int row = 0; row < field.length; row++) {
            for (int col = 0; col < field[0].length; col++) {
                if (!field[row][col].isWater() && !this.isShipSunk(field, field[row][col].getShip())) {
                    return false;
                }
            }
        }
        return true;
    }
